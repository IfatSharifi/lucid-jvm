description 'Sample Project for Lucid Testing on the JVM'

defaultTasks 'clean', 'testReport'

apply plugin: 'idea'
apply plugin: 'eclipse'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'scala'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def groovyVersion = '2.4.6'
def scalaVersion = '2.11.8'
def junitVersion = '4.12'
def testngVersion = '6.9+'
def assertjVersion = '3.4+'
def seleniumVersion = '2.+'
def driverManagerVersion = '1.4+'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: "$groovyVersion"
    compile group: 'org.scala-lang', name: 'scala-library', version: "$scalaVersion"
    testCompile group: 'junit', name: 'junit', version: "$junitVersion"
    testCompile group: 'org.testng', name: 'testng', version: "$testngVersion"
    testCompile group: 'org.assertj', name: 'assertj-core', version: "$assertjVersion"
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: "$seleniumVersion"
    testCompile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: "$driverManagerVersion"
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4'
    testCompile group: 'org.specs2', name: 'specs2-core_2.11', version: '3.8.3'
    testCompile group: 'org.specs2', name: 'specs2-junit_2.11', version: '3.8.3'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7+'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task testng(type: Test) {
    ignoreFailures = true

    if (project.hasProperty('parallelForks'))
        maxParallelForks = project.maxParallelForks as int
    else
        maxParallelForks = Runtime.runtime.availableProcessors() / 2

    if (project.hasProperty('forkEvery'))
        forkEvery = project.forkEvery as int

    useTestNG() {
        //includeGroups 'Smoke'
        //excludeGroups 'Integration'
        listeners << 'org.testng.reporters.EmailableReporter'
    }

    testLogging {
        events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }

    systemProperties = [
            browser: System.getProperty('browser', 'firefox'),
            screenshotDirectory: System.getProperty('screenshotDirectory', "$buildDir/reports/screenshots"),
            remote: System.getProperty('remote', 'false'),
            gridURL: System.getProperty('gridURL', ''),
            gridPlatform: System.getProperty('gridPlatform', ''),
            gridBrowserVersion: System.getProperty('gridBrowserVersion', ''),
            proxyEnabled: System.getProperty('proxyEnabled', 'false'),
            proxyHost: System.getProperty('proxyHost', ''),
            proxyPort: System.getProperty('proxyPort', '')
    ]
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test
    reportOn testng
}

task testReportJUnit(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests/junit")
    reportOn test
}

task testReportTestNG(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests/testng")
    reportOn testng
}
